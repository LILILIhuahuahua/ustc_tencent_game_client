// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: HappyBallProto.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace HappyBallProto {

  /// <summary>Holder for reflection information generated from HappyBallProto.proto</summary>
  public static partial class HappyBallProtoReflection {

    #region Descriptor
    /// <summary>File descriptor for HappyBallProto.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static HappyBallProtoReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChRIYXBweUJhbGxQcm90by5wcm90bxIOSGFwcHlCYWxsUHJvdG8iqAEKCEdN",
            "ZXNzYWdlEg8KB21zZ1R5cGUYASACKAUSDQoFc2VxSWQYAiACKAUSJgoGbm90",
            "aWZ5GAMgASgLMhYuSGFwcHlCYWxsUHJvdG8uTm90aWZ5EigKB3JlcXVlc3QY",
            "BCABKAsyFy5IYXBweUJhbGxQcm90by5SZXF1ZXN0EioKCHJlc3BvbnNlGAUg",
            "ASgLMhguSGFwcHlCYWxsUHJvdG8uUmVzcG9uc2Ui6AEKBk5vdGlmeRJGChZl",
            "bnRpdHlJbmZvQ2hhbmdlTm90aWZ5GAEgASgLMiYuSGFwcHlCYWxsUHJvdG8u",
            "RW50aXR5SW5mb0NoYW5nZU5vdGlmeRJCChRnYW1lR2xvYmFsSW5mb05vdGlm",
            "eRgCIAEoCzIkLkhhcHB5QmFsbFByb3RvLkdhbWVHbG9iYWxJbmZvTm90aWZ5",
            "EigKBHRpbWUYAyABKAsyGi5IYXBweUJhbGxQcm90by5UaW1lTm90aWZ5EigK",
            "B21hcEluZm8YBCABKAsyFy5IYXBweUJhbGxQcm90by5NYXBJbmZvIpYBChZF",
            "bnRpdHlJbmZvQ2hhbmdlTm90aWZ5EhIKCmVudGl0eVR5cGUYASACKAUSEAoI",
            "ZW50aXR5SWQYAiACKAUSLAoJcGxheWVyTXNnGAMgASgLMhkuSGFwcHlCYWxs",
            "UHJvdG8uUGxheWVyTXNnEigKB2l0ZW1Nc2cYBCABKAsyFy5IYXBweUJhbGxQ",
            "cm90by5JdGVtTXNnIroBChRHYW1lR2xvYmFsSW5mb05vdGlmeRIUCgxwbGF5",
            "ZXJOdW1iZXIYASACKAUSDAoEdGltZRgCIAIoAxIsCglwbGF5ZXJNc2cYAyAD",
            "KAsyGS5IYXBweUJhbGxQcm90by5QbGF5ZXJNc2cSKAoHSXRlbU1zZxgEIAMo",
            "CzIXLkhhcHB5QmFsbFByb3RvLkl0ZW1Nc2cSJgoGbWFwTXNnGAUgAigLMhYu",
            "SGFwcHlCYWxsUHJvdG8uTWFwTXNnIhoKClRpbWVOb3RpZnkSDAoEdGltZRgB",
            "IAEoAyIxCgdNYXBJbmZvEiYKBm1hcE1zZxgBIAIoCzIWLkhhcHB5QmFsbFBy",
            "b3RvLk1hcE1zZyJLCgdSZXF1ZXN0EkAKE2VudGl0eUNoYW5nZVJlcXVlc3QY",
            "ASABKAsyIy5IYXBweUJhbGxQcm90by5FbnRpdHlDaGFuZ2VSZXF1ZXN0Io4B",
            "ChNFbnRpdHlDaGFuZ2VSZXF1ZXN0EhEKCWV2ZW50VHlwZRgBIAIoBRIQCghw",
            "bGF5ZXJJZBgCIAIoBRIQCghsaW5rZWRJZBgDIAEoBRISCgpsaW5rZWRUeXBl",
            "GAQgASgFEiwKCXBsYXllck1zZxgFIAEoCzIZLkhhcHB5QmFsbFByb3RvLlBs",
            "YXllck1zZyJeCghSZXNwb25zZRIOCgZyZXN1bHQYASACKAUSQgoUZW50aXR5",
            "Q2hhbmdlUmVzcG9uc2UYAiABKAsyJC5IYXBweUJhbGxQcm90by5FbnRpdHlD",
            "aGFuZ2VSZXNwb25zZSIsChRFbnRpdHlDaGFuZ2VSZXNwb25zZRIUCgxjaGFu",
            "Z2VSZXN1bHQYASACKAgi5QEKCVBsYXllck1zZxIQCghwbGF5ZXJJZBgBIAIo",
            "BRI0Cg5wbGF5ZXJQb3NpdGlvbhgCIAIoCzIcLkhhcHB5QmFsbFByb3RvLkNv",
            "b3JkaW5hdGVYWRITCgtwbGF5ZXJTcGVlZBgDIAEoAhISCgpwbGF5ZXJTaXpl",
            "GAQgASgFEjQKDnNuYWtlRGlyZWN0aW9uGAUgAigLMhwuSGFwcHlCYWxsUHJv",
            "dG8uQ29vcmRpbmF0ZVhZEjEKC3NuYWtlU3RhdHVzGAYgAigOMhwuSGFwcHlC",
            "YWxsUHJvdG8uU05BS0VfU1RBVFVTIl8KB0l0ZW1Nc2cSDgoGZm9vZElkGAEg",
            "AigFEhAKCGZvb2RUeXBlGAIgAigFEjIKDGZvb2RQb3NpdGlvbhgDIAIoCzIc",
            "LkhhcHB5QmFsbFByb3RvLkNvb3JkaW5hdGVYWSJACgZNYXBNc2cSDAoEWE1p",
            "bhgBIAIoAhIMCgRYTWF4GAIgAigCEgwKBFlNaW4YAyACKAISDAoEWU1heBgE",
            "IAIoAiI4CgxDb29yZGluYXRlWFkSEwoLY29vcmRpbmF0ZVgYASACKAISEwoL",
            "Y29vcmRpbmF0ZVkYAiACKAIqMgoMU05BS0VfU1RBVFVTEggKBExJVkUQARII",
            "CgRERUFEEAISDgoKSU5WSU5DSUJMRRAD"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::HappyBallProto.SNAKE_STATUS), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::HappyBallProto.GMessage), global::HappyBallProto.GMessage.Parser, new[]{ "MsgType", "SeqId", "Notify", "Request", "Response" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HappyBallProto.Notify), global::HappyBallProto.Notify.Parser, new[]{ "EntityInfoChangeNotify", "GameGlobalInfoNotify", "Time", "MapInfo" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HappyBallProto.EntityInfoChangeNotify), global::HappyBallProto.EntityInfoChangeNotify.Parser, new[]{ "EntityType", "EntityId", "PlayerMsg", "ItemMsg" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HappyBallProto.GameGlobalInfoNotify), global::HappyBallProto.GameGlobalInfoNotify.Parser, new[]{ "PlayerNumber", "Time", "PlayerMsg", "ItemMsg", "MapMsg" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HappyBallProto.TimeNotify), global::HappyBallProto.TimeNotify.Parser, new[]{ "Time" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HappyBallProto.MapInfo), global::HappyBallProto.MapInfo.Parser, new[]{ "MapMsg" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HappyBallProto.Request), global::HappyBallProto.Request.Parser, new[]{ "EntityChangeRequest" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HappyBallProto.EntityChangeRequest), global::HappyBallProto.EntityChangeRequest.Parser, new[]{ "EventType", "PlayerId", "LinkedId", "LinkedType", "PlayerMsg" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HappyBallProto.Response), global::HappyBallProto.Response.Parser, new[]{ "Result", "EntityChangeResponse" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HappyBallProto.EntityChangeResponse), global::HappyBallProto.EntityChangeResponse.Parser, new[]{ "ChangeResult" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HappyBallProto.PlayerMsg), global::HappyBallProto.PlayerMsg.Parser, new[]{ "PlayerId", "PlayerPosition", "PlayerSpeed", "PlayerSize", "SnakeDirection", "SnakeStatus" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HappyBallProto.ItemMsg), global::HappyBallProto.ItemMsg.Parser, new[]{ "FoodId", "FoodType", "FoodPosition" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HappyBallProto.MapMsg), global::HappyBallProto.MapMsg.Parser, new[]{ "XMin", "XMax", "YMin", "YMax" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HappyBallProto.CoordinateXY), global::HappyBallProto.CoordinateXY.Parser, new[]{ "CoordinateX", "CoordinateY" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  ///
  ///enum
  /// </summary>
  public enum SNAKE_STATUS {
    /// <summary>
    ///存活
    /// </summary>
    [pbr::OriginalName("LIVE")] Live = 1,
    /// <summary>
    ///死亡
    /// </summary>
    [pbr::OriginalName("DEAD")] Dead = 2,
    /// <summary>
    ///暂时无敌
    /// </summary>
    [pbr::OriginalName("INVINCIBLE")] Invincible = 3,
  }

  #endregion

  #region Messages
  /// <summary>
  ///
  ///顶层消息
  /// </summary>
  public sealed partial class GMessage : pb::IMessage<GMessage> {
    private static readonly pb::MessageParser<GMessage> _parser = new pb::MessageParser<GMessage>(() => new GMessage());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HappyBallProto.HappyBallProtoReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GMessage(GMessage other) : this() {
      _hasBits0 = other._hasBits0;
      msgType_ = other.msgType_;
      seqId_ = other.seqId_;
      notify_ = other.HasNotify ? other.notify_.Clone() : null;
      request_ = other.HasRequest ? other.request_.Clone() : null;
      response_ = other.HasResponse ? other.response_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GMessage Clone() {
      return new GMessage(this);
    }

    /// <summary>Field number for the "msgType" field.</summary>
    public const int MsgTypeFieldNumber = 1;
    private readonly static int MsgTypeDefaultValue = 0;

    private int msgType_;
    /// <summary>
    ///消息类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MsgType {
      get { if ((_hasBits0 & 1) != 0) { return msgType_; } else { return MsgTypeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        msgType_ = value;
      }
    }
    /// <summary>Gets whether the "msgType" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMsgType {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "msgType" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMsgType() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "seqId" field.</summary>
    public const int SeqIdFieldNumber = 2;
    private readonly static int SeqIdDefaultValue = 0;

    private int seqId_;
    /// <summary>
    ///消息的编号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SeqId {
      get { if ((_hasBits0 & 2) != 0) { return seqId_; } else { return SeqIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        seqId_ = value;
      }
    }
    /// <summary>Gets whether the "seqId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSeqId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "seqId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSeqId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "notify" field.</summary>
    public const int NotifyFieldNumber = 3;
    private global::HappyBallProto.Notify notify_;
    /// <summary>
    ///通知类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HappyBallProto.Notify Notify {
      get { return notify_; }
      set {
        notify_ = value;
      }
    }
    /// <summary>Gets whether the notify field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNotify {
      get { return notify_ != null; }
    }
    /// <summary>Clears the value of the notify field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNotify() {
      notify_ = null;
    }

    /// <summary>Field number for the "request" field.</summary>
    public const int RequestFieldNumber = 4;
    private global::HappyBallProto.Request request_;
    /// <summary>
    ///请求类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HappyBallProto.Request Request {
      get { return request_; }
      set {
        request_ = value;
      }
    }
    /// <summary>Gets whether the request field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRequest {
      get { return request_ != null; }
    }
    /// <summary>Clears the value of the request field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRequest() {
      request_ = null;
    }

    /// <summary>Field number for the "response" field.</summary>
    public const int ResponseFieldNumber = 5;
    private global::HappyBallProto.Response response_;
    /// <summary>
    ///答复类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HappyBallProto.Response Response {
      get { return response_; }
      set {
        response_ = value;
      }
    }
    /// <summary>Gets whether the response field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasResponse {
      get { return response_ != null; }
    }
    /// <summary>Clears the value of the response field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResponse() {
      response_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MsgType != other.MsgType) return false;
      if (SeqId != other.SeqId) return false;
      if (!object.Equals(Notify, other.Notify)) return false;
      if (!object.Equals(Request, other.Request)) return false;
      if (!object.Equals(Response, other.Response)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasMsgType) hash ^= MsgType.GetHashCode();
      if (HasSeqId) hash ^= SeqId.GetHashCode();
      if (HasNotify) hash ^= Notify.GetHashCode();
      if (HasRequest) hash ^= Request.GetHashCode();
      if (HasResponse) hash ^= Response.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasMsgType) {
        output.WriteRawTag(8);
        output.WriteInt32(MsgType);
      }
      if (HasSeqId) {
        output.WriteRawTag(16);
        output.WriteInt32(SeqId);
      }
      if (HasNotify) {
        output.WriteRawTag(26);
        output.WriteMessage(Notify);
      }
      if (HasRequest) {
        output.WriteRawTag(34);
        output.WriteMessage(Request);
      }
      if (HasResponse) {
        output.WriteRawTag(42);
        output.WriteMessage(Response);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasMsgType) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MsgType);
      }
      if (HasSeqId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeqId);
      }
      if (HasNotify) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Notify);
      }
      if (HasRequest) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Request);
      }
      if (HasResponse) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Response);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GMessage other) {
      if (other == null) {
        return;
      }
      if (other.HasMsgType) {
        MsgType = other.MsgType;
      }
      if (other.HasSeqId) {
        SeqId = other.SeqId;
      }
      if (other.HasNotify) {
        if (!HasNotify) {
          Notify = new global::HappyBallProto.Notify();
        }
        Notify.MergeFrom(other.Notify);
      }
      if (other.HasRequest) {
        if (!HasRequest) {
          Request = new global::HappyBallProto.Request();
        }
        Request.MergeFrom(other.Request);
      }
      if (other.HasResponse) {
        if (!HasResponse) {
          Response = new global::HappyBallProto.Response();
        }
        Response.MergeFrom(other.Response);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MsgType = input.ReadInt32();
            break;
          }
          case 16: {
            SeqId = input.ReadInt32();
            break;
          }
          case 26: {
            if (!HasNotify) {
              Notify = new global::HappyBallProto.Notify();
            }
            input.ReadMessage(Notify);
            break;
          }
          case 34: {
            if (!HasRequest) {
              Request = new global::HappyBallProto.Request();
            }
            input.ReadMessage(Request);
            break;
          }
          case 42: {
            if (!HasResponse) {
              Response = new global::HappyBallProto.Response();
            }
            input.ReadMessage(Response);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///Notify
  /// </summary>
  public sealed partial class Notify : pb::IMessage<Notify> {
    private static readonly pb::MessageParser<Notify> _parser = new pb::MessageParser<Notify>(() => new Notify());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Notify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HappyBallProto.HappyBallProtoReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify(Notify other) : this() {
      entityInfoChangeNotify_ = other.HasEntityInfoChangeNotify ? other.entityInfoChangeNotify_.Clone() : null;
      gameGlobalInfoNotify_ = other.HasGameGlobalInfoNotify ? other.gameGlobalInfoNotify_.Clone() : null;
      time_ = other.HasTime ? other.time_.Clone() : null;
      mapInfo_ = other.HasMapInfo ? other.mapInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify Clone() {
      return new Notify(this);
    }

    /// <summary>Field number for the "entityInfoChangeNotify" field.</summary>
    public const int EntityInfoChangeNotifyFieldNumber = 1;
    private global::HappyBallProto.EntityInfoChangeNotify entityInfoChangeNotify_;
    /// <summary>
    ///实体的属性变化通知
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HappyBallProto.EntityInfoChangeNotify EntityInfoChangeNotify {
      get { return entityInfoChangeNotify_; }
      set {
        entityInfoChangeNotify_ = value;
      }
    }
    /// <summary>Gets whether the entityInfoChangeNotify field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEntityInfoChangeNotify {
      get { return entityInfoChangeNotify_ != null; }
    }
    /// <summary>Clears the value of the entityInfoChangeNotify field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEntityInfoChangeNotify() {
      entityInfoChangeNotify_ = null;
    }

    /// <summary>Field number for the "gameGlobalInfoNotify" field.</summary>
    public const int GameGlobalInfoNotifyFieldNumber = 2;
    private global::HappyBallProto.GameGlobalInfoNotify gameGlobalInfoNotify_;
    /// <summary>
    ///玩家加入时对玩家进行同步的所有消息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HappyBallProto.GameGlobalInfoNotify GameGlobalInfoNotify {
      get { return gameGlobalInfoNotify_; }
      set {
        gameGlobalInfoNotify_ = value;
      }
    }
    /// <summary>Gets whether the gameGlobalInfoNotify field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGameGlobalInfoNotify {
      get { return gameGlobalInfoNotify_ != null; }
    }
    /// <summary>Clears the value of the gameGlobalInfoNotify field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGameGlobalInfoNotify() {
      gameGlobalInfoNotify_ = null;
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 3;
    private global::HappyBallProto.TimeNotify time_;
    /// <summary>
    ///对局时间信息通知
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HappyBallProto.TimeNotify Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }
    /// <summary>Gets whether the time field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTime {
      get { return time_ != null; }
    }
    /// <summary>Clears the value of the time field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTime() {
      time_ = null;
    }

    /// <summary>Field number for the "mapInfo" field.</summary>
    public const int MapInfoFieldNumber = 4;
    private global::HappyBallProto.MapInfo mapInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HappyBallProto.MapInfo MapInfo {
      get { return mapInfo_; }
      set {
        mapInfo_ = value;
      }
    }
    /// <summary>Gets whether the mapInfo field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMapInfo {
      get { return mapInfo_ != null; }
    }
    /// <summary>Clears the value of the mapInfo field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMapInfo() {
      mapInfo_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Notify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Notify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(EntityInfoChangeNotify, other.EntityInfoChangeNotify)) return false;
      if (!object.Equals(GameGlobalInfoNotify, other.GameGlobalInfoNotify)) return false;
      if (!object.Equals(Time, other.Time)) return false;
      if (!object.Equals(MapInfo, other.MapInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasEntityInfoChangeNotify) hash ^= EntityInfoChangeNotify.GetHashCode();
      if (HasGameGlobalInfoNotify) hash ^= GameGlobalInfoNotify.GetHashCode();
      if (HasTime) hash ^= Time.GetHashCode();
      if (HasMapInfo) hash ^= MapInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasEntityInfoChangeNotify) {
        output.WriteRawTag(10);
        output.WriteMessage(EntityInfoChangeNotify);
      }
      if (HasGameGlobalInfoNotify) {
        output.WriteRawTag(18);
        output.WriteMessage(GameGlobalInfoNotify);
      }
      if (HasTime) {
        output.WriteRawTag(26);
        output.WriteMessage(Time);
      }
      if (HasMapInfo) {
        output.WriteRawTag(34);
        output.WriteMessage(MapInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasEntityInfoChangeNotify) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EntityInfoChangeNotify);
      }
      if (HasGameGlobalInfoNotify) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameGlobalInfoNotify);
      }
      if (HasTime) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Time);
      }
      if (HasMapInfo) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MapInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Notify other) {
      if (other == null) {
        return;
      }
      if (other.HasEntityInfoChangeNotify) {
        if (!HasEntityInfoChangeNotify) {
          EntityInfoChangeNotify = new global::HappyBallProto.EntityInfoChangeNotify();
        }
        EntityInfoChangeNotify.MergeFrom(other.EntityInfoChangeNotify);
      }
      if (other.HasGameGlobalInfoNotify) {
        if (!HasGameGlobalInfoNotify) {
          GameGlobalInfoNotify = new global::HappyBallProto.GameGlobalInfoNotify();
        }
        GameGlobalInfoNotify.MergeFrom(other.GameGlobalInfoNotify);
      }
      if (other.HasTime) {
        if (!HasTime) {
          Time = new global::HappyBallProto.TimeNotify();
        }
        Time.MergeFrom(other.Time);
      }
      if (other.HasMapInfo) {
        if (!HasMapInfo) {
          MapInfo = new global::HappyBallProto.MapInfo();
        }
        MapInfo.MergeFrom(other.MapInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (!HasEntityInfoChangeNotify) {
              EntityInfoChangeNotify = new global::HappyBallProto.EntityInfoChangeNotify();
            }
            input.ReadMessage(EntityInfoChangeNotify);
            break;
          }
          case 18: {
            if (!HasGameGlobalInfoNotify) {
              GameGlobalInfoNotify = new global::HappyBallProto.GameGlobalInfoNotify();
            }
            input.ReadMessage(GameGlobalInfoNotify);
            break;
          }
          case 26: {
            if (!HasTime) {
              Time = new global::HappyBallProto.TimeNotify();
            }
            input.ReadMessage(Time);
            break;
          }
          case 34: {
            if (!HasMapInfo) {
              MapInfo = new global::HappyBallProto.MapInfo();
            }
            input.ReadMessage(MapInfo);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///生成多个食物，需要发多个
  /// </summary>
  public sealed partial class EntityInfoChangeNotify : pb::IMessage<EntityInfoChangeNotify> {
    private static readonly pb::MessageParser<EntityInfoChangeNotify> _parser = new pb::MessageParser<EntityInfoChangeNotify>(() => new EntityInfoChangeNotify());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EntityInfoChangeNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HappyBallProto.HappyBallProtoReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntityInfoChangeNotify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntityInfoChangeNotify(EntityInfoChangeNotify other) : this() {
      _hasBits0 = other._hasBits0;
      entityType_ = other.entityType_;
      entityId_ = other.entityId_;
      playerMsg_ = other.HasPlayerMsg ? other.playerMsg_.Clone() : null;
      itemMsg_ = other.HasItemMsg ? other.itemMsg_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntityInfoChangeNotify Clone() {
      return new EntityInfoChangeNotify(this);
    }

    /// <summary>Field number for the "entityType" field.</summary>
    public const int EntityTypeFieldNumber = 1;
    private readonly static int EntityTypeDefaultValue = 0;

    private int entityType_;
    /// <summary>
    ///实体的类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EntityType {
      get { if ((_hasBits0 & 1) != 0) { return entityType_; } else { return EntityTypeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        entityType_ = value;
      }
    }
    /// <summary>Gets whether the "entityType" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEntityType {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "entityType" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEntityType() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "entityId" field.</summary>
    public const int EntityIdFieldNumber = 2;
    private readonly static int EntityIdDefaultValue = 0;

    private int entityId_;
    /// <summary>
    ///实体的Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EntityId {
      get { if ((_hasBits0 & 2) != 0) { return entityId_; } else { return EntityIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        entityId_ = value;
      }
    }
    /// <summary>Gets whether the "entityId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEntityId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "entityId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEntityId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "playerMsg" field.</summary>
    public const int PlayerMsgFieldNumber = 3;
    private global::HappyBallProto.PlayerMsg playerMsg_;
    /// <summary>
    ///玩家的信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HappyBallProto.PlayerMsg PlayerMsg {
      get { return playerMsg_; }
      set {
        playerMsg_ = value;
      }
    }
    /// <summary>Gets whether the playerMsg field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlayerMsg {
      get { return playerMsg_ != null; }
    }
    /// <summary>Clears the value of the playerMsg field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlayerMsg() {
      playerMsg_ = null;
    }

    /// <summary>Field number for the "itemMsg" field.</summary>
    public const int ItemMsgFieldNumber = 4;
    private global::HappyBallProto.ItemMsg itemMsg_;
    /// <summary>
    ///物体的信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HappyBallProto.ItemMsg ItemMsg {
      get { return itemMsg_; }
      set {
        itemMsg_ = value;
      }
    }
    /// <summary>Gets whether the itemMsg field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasItemMsg {
      get { return itemMsg_ != null; }
    }
    /// <summary>Clears the value of the itemMsg field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearItemMsg() {
      itemMsg_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EntityInfoChangeNotify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EntityInfoChangeNotify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EntityType != other.EntityType) return false;
      if (EntityId != other.EntityId) return false;
      if (!object.Equals(PlayerMsg, other.PlayerMsg)) return false;
      if (!object.Equals(ItemMsg, other.ItemMsg)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasEntityType) hash ^= EntityType.GetHashCode();
      if (HasEntityId) hash ^= EntityId.GetHashCode();
      if (HasPlayerMsg) hash ^= PlayerMsg.GetHashCode();
      if (HasItemMsg) hash ^= ItemMsg.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasEntityType) {
        output.WriteRawTag(8);
        output.WriteInt32(EntityType);
      }
      if (HasEntityId) {
        output.WriteRawTag(16);
        output.WriteInt32(EntityId);
      }
      if (HasPlayerMsg) {
        output.WriteRawTag(26);
        output.WriteMessage(PlayerMsg);
      }
      if (HasItemMsg) {
        output.WriteRawTag(34);
        output.WriteMessage(ItemMsg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasEntityType) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EntityType);
      }
      if (HasEntityId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EntityId);
      }
      if (HasPlayerMsg) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerMsg);
      }
      if (HasItemMsg) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ItemMsg);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EntityInfoChangeNotify other) {
      if (other == null) {
        return;
      }
      if (other.HasEntityType) {
        EntityType = other.EntityType;
      }
      if (other.HasEntityId) {
        EntityId = other.EntityId;
      }
      if (other.HasPlayerMsg) {
        if (!HasPlayerMsg) {
          PlayerMsg = new global::HappyBallProto.PlayerMsg();
        }
        PlayerMsg.MergeFrom(other.PlayerMsg);
      }
      if (other.HasItemMsg) {
        if (!HasItemMsg) {
          ItemMsg = new global::HappyBallProto.ItemMsg();
        }
        ItemMsg.MergeFrom(other.ItemMsg);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EntityType = input.ReadInt32();
            break;
          }
          case 16: {
            EntityId = input.ReadInt32();
            break;
          }
          case 26: {
            if (!HasPlayerMsg) {
              PlayerMsg = new global::HappyBallProto.PlayerMsg();
            }
            input.ReadMessage(PlayerMsg);
            break;
          }
          case 34: {
            if (!HasItemMsg) {
              ItemMsg = new global::HappyBallProto.ItemMsg();
            }
            input.ReadMessage(ItemMsg);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GameGlobalInfoNotify : pb::IMessage<GameGlobalInfoNotify> {
    private static readonly pb::MessageParser<GameGlobalInfoNotify> _parser = new pb::MessageParser<GameGlobalInfoNotify>(() => new GameGlobalInfoNotify());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameGlobalInfoNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HappyBallProto.HappyBallProtoReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameGlobalInfoNotify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameGlobalInfoNotify(GameGlobalInfoNotify other) : this() {
      _hasBits0 = other._hasBits0;
      playerNumber_ = other.playerNumber_;
      time_ = other.time_;
      playerMsg_ = other.playerMsg_.Clone();
      itemMsg_ = other.itemMsg_.Clone();
      mapMsg_ = other.HasMapMsg ? other.mapMsg_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameGlobalInfoNotify Clone() {
      return new GameGlobalInfoNotify(this);
    }

    /// <summary>Field number for the "playerNumber" field.</summary>
    public const int PlayerNumberFieldNumber = 1;
    private readonly static int PlayerNumberDefaultValue = 0;

    private int playerNumber_;
    /// <summary>
    ///玩家数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerNumber {
      get { if ((_hasBits0 & 1) != 0) { return playerNumber_; } else { return PlayerNumberDefaultValue; } }
      set {
        _hasBits0 |= 1;
        playerNumber_ = value;
      }
    }
    /// <summary>Gets whether the "playerNumber" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlayerNumber {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "playerNumber" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlayerNumber() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 2;
    private readonly static long TimeDefaultValue = 0L;

    private long time_;
    /// <summary>
    ///游戏对局中的时间(开始时间)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Time {
      get { if ((_hasBits0 & 2) != 0) { return time_; } else { return TimeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        time_ = value;
      }
    }
    /// <summary>Gets whether the "time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTime {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTime() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "playerMsg" field.</summary>
    public const int PlayerMsgFieldNumber = 3;
    private static readonly pb::FieldCodec<global::HappyBallProto.PlayerMsg> _repeated_playerMsg_codec
        = pb::FieldCodec.ForMessage(26, global::HappyBallProto.PlayerMsg.Parser);
    private readonly pbc::RepeatedField<global::HappyBallProto.PlayerMsg> playerMsg_ = new pbc::RepeatedField<global::HappyBallProto.PlayerMsg>();
    /// <summary>
    ///对局中玩家的信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::HappyBallProto.PlayerMsg> PlayerMsg {
      get { return playerMsg_; }
    }

    /// <summary>Field number for the "ItemMsg" field.</summary>
    public const int ItemMsgFieldNumber = 4;
    private static readonly pb::FieldCodec<global::HappyBallProto.ItemMsg> _repeated_itemMsg_codec
        = pb::FieldCodec.ForMessage(34, global::HappyBallProto.ItemMsg.Parser);
    private readonly pbc::RepeatedField<global::HappyBallProto.ItemMsg> itemMsg_ = new pbc::RepeatedField<global::HappyBallProto.ItemMsg>();
    /// <summary>
    ///对局中道具的信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::HappyBallProto.ItemMsg> ItemMsg {
      get { return itemMsg_; }
    }

    /// <summary>Field number for the "mapMsg" field.</summary>
    public const int MapMsgFieldNumber = 5;
    private global::HappyBallProto.MapMsg mapMsg_;
    /// <summary>
    ///地图信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HappyBallProto.MapMsg MapMsg {
      get { return mapMsg_; }
      set {
        mapMsg_ = value;
      }
    }
    /// <summary>Gets whether the mapMsg field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMapMsg {
      get { return mapMsg_ != null; }
    }
    /// <summary>Clears the value of the mapMsg field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMapMsg() {
      mapMsg_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameGlobalInfoNotify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameGlobalInfoNotify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerNumber != other.PlayerNumber) return false;
      if (Time != other.Time) return false;
      if(!playerMsg_.Equals(other.playerMsg_)) return false;
      if(!itemMsg_.Equals(other.itemMsg_)) return false;
      if (!object.Equals(MapMsg, other.MapMsg)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPlayerNumber) hash ^= PlayerNumber.GetHashCode();
      if (HasTime) hash ^= Time.GetHashCode();
      hash ^= playerMsg_.GetHashCode();
      hash ^= itemMsg_.GetHashCode();
      if (HasMapMsg) hash ^= MapMsg.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasPlayerNumber) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerNumber);
      }
      if (HasTime) {
        output.WriteRawTag(16);
        output.WriteInt64(Time);
      }
      playerMsg_.WriteTo(output, _repeated_playerMsg_codec);
      itemMsg_.WriteTo(output, _repeated_itemMsg_codec);
      if (HasMapMsg) {
        output.WriteRawTag(42);
        output.WriteMessage(MapMsg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPlayerNumber) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerNumber);
      }
      if (HasTime) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Time);
      }
      size += playerMsg_.CalculateSize(_repeated_playerMsg_codec);
      size += itemMsg_.CalculateSize(_repeated_itemMsg_codec);
      if (HasMapMsg) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MapMsg);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameGlobalInfoNotify other) {
      if (other == null) {
        return;
      }
      if (other.HasPlayerNumber) {
        PlayerNumber = other.PlayerNumber;
      }
      if (other.HasTime) {
        Time = other.Time;
      }
      playerMsg_.Add(other.playerMsg_);
      itemMsg_.Add(other.itemMsg_);
      if (other.HasMapMsg) {
        if (!HasMapMsg) {
          MapMsg = new global::HappyBallProto.MapMsg();
        }
        MapMsg.MergeFrom(other.MapMsg);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerNumber = input.ReadInt32();
            break;
          }
          case 16: {
            Time = input.ReadInt64();
            break;
          }
          case 26: {
            playerMsg_.AddEntriesFrom(input, _repeated_playerMsg_codec);
            break;
          }
          case 34: {
            itemMsg_.AddEntriesFrom(input, _repeated_itemMsg_codec);
            break;
          }
          case 42: {
            if (!HasMapMsg) {
              MapMsg = new global::HappyBallProto.MapMsg();
            }
            input.ReadMessage(MapMsg);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///对局时间信息通知
  /// </summary>
  public sealed partial class TimeNotify : pb::IMessage<TimeNotify> {
    private static readonly pb::MessageParser<TimeNotify> _parser = new pb::MessageParser<TimeNotify>(() => new TimeNotify());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TimeNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HappyBallProto.HappyBallProtoReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeNotify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeNotify(TimeNotify other) : this() {
      _hasBits0 = other._hasBits0;
      time_ = other.time_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeNotify Clone() {
      return new TimeNotify(this);
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 1;
    private readonly static long TimeDefaultValue = 0L;

    private long time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Time {
      get { if ((_hasBits0 & 1) != 0) { return time_; } else { return TimeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        time_ = value;
      }
    }
    /// <summary>Gets whether the "time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTime {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTime() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TimeNotify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TimeNotify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Time != other.Time) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasTime) hash ^= Time.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasTime) {
        output.WriteRawTag(8);
        output.WriteInt64(Time);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasTime) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Time);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TimeNotify other) {
      if (other == null) {
        return;
      }
      if (other.HasTime) {
        Time = other.Time;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Time = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MapInfo : pb::IMessage<MapInfo> {
    private static readonly pb::MessageParser<MapInfo> _parser = new pb::MessageParser<MapInfo>(() => new MapInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MapInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HappyBallProto.HappyBallProtoReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapInfo(MapInfo other) : this() {
      mapMsg_ = other.HasMapMsg ? other.mapMsg_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapInfo Clone() {
      return new MapInfo(this);
    }

    /// <summary>Field number for the "mapMsg" field.</summary>
    public const int MapMsgFieldNumber = 1;
    private global::HappyBallProto.MapMsg mapMsg_;
    /// <summary>
    ///地图信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HappyBallProto.MapMsg MapMsg {
      get { return mapMsg_; }
      set {
        mapMsg_ = value;
      }
    }
    /// <summary>Gets whether the mapMsg field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMapMsg {
      get { return mapMsg_ != null; }
    }
    /// <summary>Clears the value of the mapMsg field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMapMsg() {
      mapMsg_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MapInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MapInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(MapMsg, other.MapMsg)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasMapMsg) hash ^= MapMsg.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasMapMsg) {
        output.WriteRawTag(10);
        output.WriteMessage(MapMsg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasMapMsg) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MapMsg);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MapInfo other) {
      if (other == null) {
        return;
      }
      if (other.HasMapMsg) {
        if (!HasMapMsg) {
          MapMsg = new global::HappyBallProto.MapMsg();
        }
        MapMsg.MergeFrom(other.MapMsg);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (!HasMapMsg) {
              MapMsg = new global::HappyBallProto.MapMsg();
            }
            input.ReadMessage(MapMsg);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///Request
  /// </summary>
  public sealed partial class Request : pb::IMessage<Request> {
    private static readonly pb::MessageParser<Request> _parser = new pb::MessageParser<Request>(() => new Request());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Request> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HappyBallProto.HappyBallProtoReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Request() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Request(Request other) : this() {
      entityChangeRequest_ = other.HasEntityChangeRequest ? other.entityChangeRequest_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Request Clone() {
      return new Request(this);
    }

    /// <summary>Field number for the "entityChangeRequest" field.</summary>
    public const int EntityChangeRequestFieldNumber = 1;
    private global::HappyBallProto.EntityChangeRequest entityChangeRequest_;
    /// <summary>
    ///实体改变请求，例如两条蛇相撞的时候、蛇吃道具的时候要发此类请求
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HappyBallProto.EntityChangeRequest EntityChangeRequest {
      get { return entityChangeRequest_; }
      set {
        entityChangeRequest_ = value;
      }
    }
    /// <summary>Gets whether the entityChangeRequest field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEntityChangeRequest {
      get { return entityChangeRequest_ != null; }
    }
    /// <summary>Clears the value of the entityChangeRequest field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEntityChangeRequest() {
      entityChangeRequest_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Request);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Request other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(EntityChangeRequest, other.EntityChangeRequest)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasEntityChangeRequest) hash ^= EntityChangeRequest.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasEntityChangeRequest) {
        output.WriteRawTag(10);
        output.WriteMessage(EntityChangeRequest);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasEntityChangeRequest) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EntityChangeRequest);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Request other) {
      if (other == null) {
        return;
      }
      if (other.HasEntityChangeRequest) {
        if (!HasEntityChangeRequest) {
          EntityChangeRequest = new global::HappyBallProto.EntityChangeRequest();
        }
        EntityChangeRequest.MergeFrom(other.EntityChangeRequest);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (!HasEntityChangeRequest) {
              EntityChangeRequest = new global::HappyBallProto.EntityChangeRequest();
            }
            input.ReadMessage(EntityChangeRequest);
            break;
          }
        }
      }
    }

  }

  public sealed partial class EntityChangeRequest : pb::IMessage<EntityChangeRequest> {
    private static readonly pb::MessageParser<EntityChangeRequest> _parser = new pb::MessageParser<EntityChangeRequest>(() => new EntityChangeRequest());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EntityChangeRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HappyBallProto.HappyBallProtoReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntityChangeRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntityChangeRequest(EntityChangeRequest other) : this() {
      _hasBits0 = other._hasBits0;
      eventType_ = other.eventType_;
      playerId_ = other.playerId_;
      linkedId_ = other.linkedId_;
      linkedType_ = other.linkedType_;
      playerMsg_ = other.HasPlayerMsg ? other.playerMsg_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntityChangeRequest Clone() {
      return new EntityChangeRequest(this);
    }

    /// <summary>Field number for the "eventType" field.</summary>
    public const int EventTypeFieldNumber = 1;
    private readonly static int EventTypeDefaultValue = 0;

    private int eventType_;
    /// <summary>
    /// 事件类型 enum
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EventType {
      get { if ((_hasBits0 & 1) != 0) { return eventType_; } else { return EventTypeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        eventType_ = value;
      }
    }
    /// <summary>Gets whether the "eventType" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEventType {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "eventType" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEventType() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "playerId" field.</summary>
    public const int PlayerIdFieldNumber = 2;
    private readonly static int PlayerIdDefaultValue = 0;

    private int playerId_;
    /// <summary>
    /// 发送请求的实体Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId {
      get { if ((_hasBits0 & 2) != 0) { return playerId_; } else { return PlayerIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        playerId_ = value;
      }
    }
    /// <summary>Gets whether the "playerId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlayerId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "playerId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlayerId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "linkedId" field.</summary>
    public const int LinkedIdFieldNumber = 3;
    private readonly static int LinkedIdDefaultValue = 0;

    private int linkedId_;
    /// <summary>
    /// 交互对象
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LinkedId {
      get { if ((_hasBits0 & 4) != 0) { return linkedId_; } else { return LinkedIdDefaultValue; } }
      set {
        _hasBits0 |= 4;
        linkedId_ = value;
      }
    }
    /// <summary>Gets whether the "linkedId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLinkedId {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "linkedId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLinkedId() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "linkedType" field.</summary>
    public const int LinkedTypeFieldNumber = 4;
    private readonly static int LinkedTypeDefaultValue = 0;

    private int linkedType_;
    /// <summary>
    ///交互的对象类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LinkedType {
      get { if ((_hasBits0 & 8) != 0) { return linkedType_; } else { return LinkedTypeDefaultValue; } }
      set {
        _hasBits0 |= 8;
        linkedType_ = value;
      }
    }
    /// <summary>Gets whether the "linkedType" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLinkedType {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "linkedType" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLinkedType() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "playerMsg" field.</summary>
    public const int PlayerMsgFieldNumber = 5;
    private global::HappyBallProto.PlayerMsg playerMsg_;
    /// <summary>
    ///玩家的信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HappyBallProto.PlayerMsg PlayerMsg {
      get { return playerMsg_; }
      set {
        playerMsg_ = value;
      }
    }
    /// <summary>Gets whether the playerMsg field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlayerMsg {
      get { return playerMsg_ != null; }
    }
    /// <summary>Clears the value of the playerMsg field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlayerMsg() {
      playerMsg_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EntityChangeRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EntityChangeRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EventType != other.EventType) return false;
      if (PlayerId != other.PlayerId) return false;
      if (LinkedId != other.LinkedId) return false;
      if (LinkedType != other.LinkedType) return false;
      if (!object.Equals(PlayerMsg, other.PlayerMsg)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasEventType) hash ^= EventType.GetHashCode();
      if (HasPlayerId) hash ^= PlayerId.GetHashCode();
      if (HasLinkedId) hash ^= LinkedId.GetHashCode();
      if (HasLinkedType) hash ^= LinkedType.GetHashCode();
      if (HasPlayerMsg) hash ^= PlayerMsg.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasEventType) {
        output.WriteRawTag(8);
        output.WriteInt32(EventType);
      }
      if (HasPlayerId) {
        output.WriteRawTag(16);
        output.WriteInt32(PlayerId);
      }
      if (HasLinkedId) {
        output.WriteRawTag(24);
        output.WriteInt32(LinkedId);
      }
      if (HasLinkedType) {
        output.WriteRawTag(32);
        output.WriteInt32(LinkedType);
      }
      if (HasPlayerMsg) {
        output.WriteRawTag(42);
        output.WriteMessage(PlayerMsg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasEventType) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EventType);
      }
      if (HasPlayerId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      if (HasLinkedId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LinkedId);
      }
      if (HasLinkedType) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LinkedType);
      }
      if (HasPlayerMsg) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerMsg);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EntityChangeRequest other) {
      if (other == null) {
        return;
      }
      if (other.HasEventType) {
        EventType = other.EventType;
      }
      if (other.HasPlayerId) {
        PlayerId = other.PlayerId;
      }
      if (other.HasLinkedId) {
        LinkedId = other.LinkedId;
      }
      if (other.HasLinkedType) {
        LinkedType = other.LinkedType;
      }
      if (other.HasPlayerMsg) {
        if (!HasPlayerMsg) {
          PlayerMsg = new global::HappyBallProto.PlayerMsg();
        }
        PlayerMsg.MergeFrom(other.PlayerMsg);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EventType = input.ReadInt32();
            break;
          }
          case 16: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 24: {
            LinkedId = input.ReadInt32();
            break;
          }
          case 32: {
            LinkedType = input.ReadInt32();
            break;
          }
          case 42: {
            if (!HasPlayerMsg) {
              PlayerMsg = new global::HappyBallProto.PlayerMsg();
            }
            input.ReadMessage(PlayerMsg);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///Response
  /// </summary>
  public sealed partial class Response : pb::IMessage<Response> {
    private static readonly pb::MessageParser<Response> _parser = new pb::MessageParser<Response>(() => new Response());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Response> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HappyBallProto.HappyBallProtoReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Response() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Response(Response other) : this() {
      _hasBits0 = other._hasBits0;
      result_ = other.result_;
      entityChangeResponse_ = other.HasEntityChangeResponse ? other.entityChangeResponse_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Response Clone() {
      return new Response(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private readonly static int ResultDefaultValue = 0;

    private int result_;
    /// <summary>
    ///返回结果
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Result {
      get { if ((_hasBits0 & 1) != 0) { return result_; } else { return ResultDefaultValue; } }
      set {
        _hasBits0 |= 1;
        result_ = value;
      }
    }
    /// <summary>Gets whether the "result" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasResult {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "result" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResult() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "entityChangeResponse" field.</summary>
    public const int EntityChangeResponseFieldNumber = 2;
    private global::HappyBallProto.EntityChangeResponse entityChangeResponse_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HappyBallProto.EntityChangeResponse EntityChangeResponse {
      get { return entityChangeResponse_; }
      set {
        entityChangeResponse_ = value;
      }
    }
    /// <summary>Gets whether the entityChangeResponse field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEntityChangeResponse {
      get { return entityChangeResponse_ != null; }
    }
    /// <summary>Clears the value of the entityChangeResponse field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEntityChangeResponse() {
      entityChangeResponse_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Response);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Response other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      if (!object.Equals(EntityChangeResponse, other.EntityChangeResponse)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasResult) hash ^= Result.GetHashCode();
      if (HasEntityChangeResponse) hash ^= EntityChangeResponse.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasResult) {
        output.WriteRawTag(8);
        output.WriteInt32(Result);
      }
      if (HasEntityChangeResponse) {
        output.WriteRawTag(18);
        output.WriteMessage(EntityChangeResponse);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasResult) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
      }
      if (HasEntityChangeResponse) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EntityChangeResponse);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Response other) {
      if (other == null) {
        return;
      }
      if (other.HasResult) {
        Result = other.Result;
      }
      if (other.HasEntityChangeResponse) {
        if (!HasEntityChangeResponse) {
          EntityChangeResponse = new global::HappyBallProto.EntityChangeResponse();
        }
        EntityChangeResponse.MergeFrom(other.EntityChangeResponse);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Result = input.ReadInt32();
            break;
          }
          case 18: {
            if (!HasEntityChangeResponse) {
              EntityChangeResponse = new global::HappyBallProto.EntityChangeResponse();
            }
            input.ReadMessage(EntityChangeResponse);
            break;
          }
        }
      }
    }

  }

  public sealed partial class EntityChangeResponse : pb::IMessage<EntityChangeResponse> {
    private static readonly pb::MessageParser<EntityChangeResponse> _parser = new pb::MessageParser<EntityChangeResponse>(() => new EntityChangeResponse());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EntityChangeResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HappyBallProto.HappyBallProtoReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntityChangeResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntityChangeResponse(EntityChangeResponse other) : this() {
      _hasBits0 = other._hasBits0;
      changeResult_ = other.changeResult_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntityChangeResponse Clone() {
      return new EntityChangeResponse(this);
    }

    /// <summary>Field number for the "changeResult" field.</summary>
    public const int ChangeResultFieldNumber = 1;
    private readonly static bool ChangeResultDefaultValue = false;

    private bool changeResult_;
    /// <summary>
    ///改变结果是否有效
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ChangeResult {
      get { if ((_hasBits0 & 1) != 0) { return changeResult_; } else { return ChangeResultDefaultValue; } }
      set {
        _hasBits0 |= 1;
        changeResult_ = value;
      }
    }
    /// <summary>Gets whether the "changeResult" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasChangeResult {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "changeResult" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearChangeResult() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EntityChangeResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EntityChangeResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChangeResult != other.ChangeResult) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasChangeResult) hash ^= ChangeResult.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasChangeResult) {
        output.WriteRawTag(8);
        output.WriteBool(ChangeResult);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasChangeResult) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EntityChangeResponse other) {
      if (other == null) {
        return;
      }
      if (other.HasChangeResult) {
        ChangeResult = other.ChangeResult;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChangeResult = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///struct结构
  /// </summary>
  public sealed partial class PlayerMsg : pb::IMessage<PlayerMsg> {
    private static readonly pb::MessageParser<PlayerMsg> _parser = new pb::MessageParser<PlayerMsg>(() => new PlayerMsg());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HappyBallProto.HappyBallProtoReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerMsg(PlayerMsg other) : this() {
      _hasBits0 = other._hasBits0;
      playerId_ = other.playerId_;
      playerPosition_ = other.HasPlayerPosition ? other.playerPosition_.Clone() : null;
      playerSpeed_ = other.playerSpeed_;
      playerSize_ = other.playerSize_;
      snakeDirection_ = other.HasSnakeDirection ? other.snakeDirection_.Clone() : null;
      snakeStatus_ = other.snakeStatus_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerMsg Clone() {
      return new PlayerMsg(this);
    }

    /// <summary>Field number for the "playerId" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private readonly static int PlayerIdDefaultValue = 0;

    private int playerId_;
    /// <summary>
    ///玩家的ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId {
      get { if ((_hasBits0 & 1) != 0) { return playerId_; } else { return PlayerIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        playerId_ = value;
      }
    }
    /// <summary>Gets whether the "playerId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlayerId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "playerId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlayerId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "playerPosition" field.</summary>
    public const int PlayerPositionFieldNumber = 2;
    private global::HappyBallProto.CoordinateXY playerPosition_;
    /// <summary>
    ///玩家的坐标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HappyBallProto.CoordinateXY PlayerPosition {
      get { return playerPosition_; }
      set {
        playerPosition_ = value;
      }
    }
    /// <summary>Gets whether the playerPosition field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlayerPosition {
      get { return playerPosition_ != null; }
    }
    /// <summary>Clears the value of the playerPosition field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlayerPosition() {
      playerPosition_ = null;
    }

    /// <summary>Field number for the "playerSpeed" field.</summary>
    public const int PlayerSpeedFieldNumber = 3;
    private readonly static float PlayerSpeedDefaultValue = 0F;

    private float playerSpeed_;
    /// <summary>
    ///玩家的速度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PlayerSpeed {
      get { if ((_hasBits0 & 2) != 0) { return playerSpeed_; } else { return PlayerSpeedDefaultValue; } }
      set {
        _hasBits0 |= 2;
        playerSpeed_ = value;
      }
    }
    /// <summary>Gets whether the "playerSpeed" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlayerSpeed {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "playerSpeed" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlayerSpeed() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "playerSize" field.</summary>
    public const int PlayerSizeFieldNumber = 4;
    private readonly static int PlayerSizeDefaultValue = 0;

    private int playerSize_;
    /// <summary>
    ///玩家的大小
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerSize {
      get { if ((_hasBits0 & 4) != 0) { return playerSize_; } else { return PlayerSizeDefaultValue; } }
      set {
        _hasBits0 |= 4;
        playerSize_ = value;
      }
    }
    /// <summary>Gets whether the "playerSize" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlayerSize {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "playerSize" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlayerSize() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "snakeDirection" field.</summary>
    public const int SnakeDirectionFieldNumber = 5;
    private global::HappyBallProto.CoordinateXY snakeDirection_;
    /// <summary>
    ///玩家的行进方向
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HappyBallProto.CoordinateXY SnakeDirection {
      get { return snakeDirection_; }
      set {
        snakeDirection_ = value;
      }
    }
    /// <summary>Gets whether the snakeDirection field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSnakeDirection {
      get { return snakeDirection_ != null; }
    }
    /// <summary>Clears the value of the snakeDirection field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSnakeDirection() {
      snakeDirection_ = null;
    }

    /// <summary>Field number for the "snakeStatus" field.</summary>
    public const int SnakeStatusFieldNumber = 6;
    private readonly static global::HappyBallProto.SNAKE_STATUS SnakeStatusDefaultValue = global::HappyBallProto.SNAKE_STATUS.Live;

    private global::HappyBallProto.SNAKE_STATUS snakeStatus_;
    /// <summary>
    ///玩家的状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HappyBallProto.SNAKE_STATUS SnakeStatus {
      get { if ((_hasBits0 & 8) != 0) { return snakeStatus_; } else { return SnakeStatusDefaultValue; } }
      set {
        _hasBits0 |= 8;
        snakeStatus_ = value;
      }
    }
    /// <summary>Gets whether the "snakeStatus" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSnakeStatus {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "snakeStatus" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSnakeStatus() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (!object.Equals(PlayerPosition, other.PlayerPosition)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PlayerSpeed, other.PlayerSpeed)) return false;
      if (PlayerSize != other.PlayerSize) return false;
      if (!object.Equals(SnakeDirection, other.SnakeDirection)) return false;
      if (SnakeStatus != other.SnakeStatus) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPlayerId) hash ^= PlayerId.GetHashCode();
      if (HasPlayerPosition) hash ^= PlayerPosition.GetHashCode();
      if (HasPlayerSpeed) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PlayerSpeed);
      if (HasPlayerSize) hash ^= PlayerSize.GetHashCode();
      if (HasSnakeDirection) hash ^= SnakeDirection.GetHashCode();
      if (HasSnakeStatus) hash ^= SnakeStatus.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasPlayerId) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (HasPlayerPosition) {
        output.WriteRawTag(18);
        output.WriteMessage(PlayerPosition);
      }
      if (HasPlayerSpeed) {
        output.WriteRawTag(29);
        output.WriteFloat(PlayerSpeed);
      }
      if (HasPlayerSize) {
        output.WriteRawTag(32);
        output.WriteInt32(PlayerSize);
      }
      if (HasSnakeDirection) {
        output.WriteRawTag(42);
        output.WriteMessage(SnakeDirection);
      }
      if (HasSnakeStatus) {
        output.WriteRawTag(48);
        output.WriteEnum((int) SnakeStatus);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPlayerId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      if (HasPlayerPosition) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerPosition);
      }
      if (HasPlayerSpeed) {
        size += 1 + 4;
      }
      if (HasPlayerSize) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerSize);
      }
      if (HasSnakeDirection) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SnakeDirection);
      }
      if (HasSnakeStatus) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SnakeStatus);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerMsg other) {
      if (other == null) {
        return;
      }
      if (other.HasPlayerId) {
        PlayerId = other.PlayerId;
      }
      if (other.HasPlayerPosition) {
        if (!HasPlayerPosition) {
          PlayerPosition = new global::HappyBallProto.CoordinateXY();
        }
        PlayerPosition.MergeFrom(other.PlayerPosition);
      }
      if (other.HasPlayerSpeed) {
        PlayerSpeed = other.PlayerSpeed;
      }
      if (other.HasPlayerSize) {
        PlayerSize = other.PlayerSize;
      }
      if (other.HasSnakeDirection) {
        if (!HasSnakeDirection) {
          SnakeDirection = new global::HappyBallProto.CoordinateXY();
        }
        SnakeDirection.MergeFrom(other.SnakeDirection);
      }
      if (other.HasSnakeStatus) {
        SnakeStatus = other.SnakeStatus;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 18: {
            if (!HasPlayerPosition) {
              PlayerPosition = new global::HappyBallProto.CoordinateXY();
            }
            input.ReadMessage(PlayerPosition);
            break;
          }
          case 29: {
            PlayerSpeed = input.ReadFloat();
            break;
          }
          case 32: {
            PlayerSize = input.ReadInt32();
            break;
          }
          case 42: {
            if (!HasSnakeDirection) {
              SnakeDirection = new global::HappyBallProto.CoordinateXY();
            }
            input.ReadMessage(SnakeDirection);
            break;
          }
          case 48: {
            SnakeStatus = (global::HappyBallProto.SNAKE_STATUS) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ItemMsg : pb::IMessage<ItemMsg> {
    private static readonly pb::MessageParser<ItemMsg> _parser = new pb::MessageParser<ItemMsg>(() => new ItemMsg());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ItemMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HappyBallProto.HappyBallProtoReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemMsg(ItemMsg other) : this() {
      _hasBits0 = other._hasBits0;
      foodId_ = other.foodId_;
      foodType_ = other.foodType_;
      foodPosition_ = other.HasFoodPosition ? other.foodPosition_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemMsg Clone() {
      return new ItemMsg(this);
    }

    /// <summary>Field number for the "foodId" field.</summary>
    public const int FoodIdFieldNumber = 1;
    private readonly static int FoodIdDefaultValue = 0;

    private int foodId_;
    /// <summary>
    ///食物Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FoodId {
      get { if ((_hasBits0 & 1) != 0) { return foodId_; } else { return FoodIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        foodId_ = value;
      }
    }
    /// <summary>Gets whether the "foodId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFoodId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "foodId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFoodId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "foodType" field.</summary>
    public const int FoodTypeFieldNumber = 2;
    private readonly static int FoodTypeDefaultValue = 0;

    private int foodType_;
    /// <summary>
    ///食物类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FoodType {
      get { if ((_hasBits0 & 2) != 0) { return foodType_; } else { return FoodTypeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        foodType_ = value;
      }
    }
    /// <summary>Gets whether the "foodType" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFoodType {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "foodType" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFoodType() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "foodPosition" field.</summary>
    public const int FoodPositionFieldNumber = 3;
    private global::HappyBallProto.CoordinateXY foodPosition_;
    /// <summary>
    ///食物的初始坐标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HappyBallProto.CoordinateXY FoodPosition {
      get { return foodPosition_; }
      set {
        foodPosition_ = value;
      }
    }
    /// <summary>Gets whether the foodPosition field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFoodPosition {
      get { return foodPosition_ != null; }
    }
    /// <summary>Clears the value of the foodPosition field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFoodPosition() {
      foodPosition_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ItemMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ItemMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FoodId != other.FoodId) return false;
      if (FoodType != other.FoodType) return false;
      if (!object.Equals(FoodPosition, other.FoodPosition)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasFoodId) hash ^= FoodId.GetHashCode();
      if (HasFoodType) hash ^= FoodType.GetHashCode();
      if (HasFoodPosition) hash ^= FoodPosition.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasFoodId) {
        output.WriteRawTag(8);
        output.WriteInt32(FoodId);
      }
      if (HasFoodType) {
        output.WriteRawTag(16);
        output.WriteInt32(FoodType);
      }
      if (HasFoodPosition) {
        output.WriteRawTag(26);
        output.WriteMessage(FoodPosition);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasFoodId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FoodId);
      }
      if (HasFoodType) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FoodType);
      }
      if (HasFoodPosition) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FoodPosition);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ItemMsg other) {
      if (other == null) {
        return;
      }
      if (other.HasFoodId) {
        FoodId = other.FoodId;
      }
      if (other.HasFoodType) {
        FoodType = other.FoodType;
      }
      if (other.HasFoodPosition) {
        if (!HasFoodPosition) {
          FoodPosition = new global::HappyBallProto.CoordinateXY();
        }
        FoodPosition.MergeFrom(other.FoodPosition);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            FoodId = input.ReadInt32();
            break;
          }
          case 16: {
            FoodType = input.ReadInt32();
            break;
          }
          case 26: {
            if (!HasFoodPosition) {
              FoodPosition = new global::HappyBallProto.CoordinateXY();
            }
            input.ReadMessage(FoodPosition);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MapMsg : pb::IMessage<MapMsg> {
    private static readonly pb::MessageParser<MapMsg> _parser = new pb::MessageParser<MapMsg>(() => new MapMsg());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MapMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HappyBallProto.HappyBallProtoReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapMsg(MapMsg other) : this() {
      _hasBits0 = other._hasBits0;
      xMin_ = other.xMin_;
      xMax_ = other.xMax_;
      yMin_ = other.yMin_;
      yMax_ = other.yMax_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapMsg Clone() {
      return new MapMsg(this);
    }

    /// <summary>Field number for the "XMin" field.</summary>
    public const int XMinFieldNumber = 1;
    private readonly static float XMinDefaultValue = 0F;

    private float xMin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float XMin {
      get { if ((_hasBits0 & 1) != 0) { return xMin_; } else { return XMinDefaultValue; } }
      set {
        _hasBits0 |= 1;
        xMin_ = value;
      }
    }
    /// <summary>Gets whether the "XMin" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasXMin {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "XMin" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearXMin() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "XMax" field.</summary>
    public const int XMaxFieldNumber = 2;
    private readonly static float XMaxDefaultValue = 0F;

    private float xMax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float XMax {
      get { if ((_hasBits0 & 2) != 0) { return xMax_; } else { return XMaxDefaultValue; } }
      set {
        _hasBits0 |= 2;
        xMax_ = value;
      }
    }
    /// <summary>Gets whether the "XMax" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasXMax {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "XMax" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearXMax() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "YMin" field.</summary>
    public const int YMinFieldNumber = 3;
    private readonly static float YMinDefaultValue = 0F;

    private float yMin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float YMin {
      get { if ((_hasBits0 & 4) != 0) { return yMin_; } else { return YMinDefaultValue; } }
      set {
        _hasBits0 |= 4;
        yMin_ = value;
      }
    }
    /// <summary>Gets whether the "YMin" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasYMin {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "YMin" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearYMin() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "YMax" field.</summary>
    public const int YMaxFieldNumber = 4;
    private readonly static float YMaxDefaultValue = 0F;

    private float yMax_;
    /// <summary>
    ///四个边界
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float YMax {
      get { if ((_hasBits0 & 8) != 0) { return yMax_; } else { return YMaxDefaultValue; } }
      set {
        _hasBits0 |= 8;
        yMax_ = value;
      }
    }
    /// <summary>Gets whether the "YMax" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasYMax {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "YMax" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearYMax() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MapMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MapMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(XMin, other.XMin)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(XMax, other.XMax)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(YMin, other.YMin)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(YMax, other.YMax)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasXMin) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(XMin);
      if (HasXMax) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(XMax);
      if (HasYMin) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(YMin);
      if (HasYMax) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(YMax);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasXMin) {
        output.WriteRawTag(13);
        output.WriteFloat(XMin);
      }
      if (HasXMax) {
        output.WriteRawTag(21);
        output.WriteFloat(XMax);
      }
      if (HasYMin) {
        output.WriteRawTag(29);
        output.WriteFloat(YMin);
      }
      if (HasYMax) {
        output.WriteRawTag(37);
        output.WriteFloat(YMax);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasXMin) {
        size += 1 + 4;
      }
      if (HasXMax) {
        size += 1 + 4;
      }
      if (HasYMin) {
        size += 1 + 4;
      }
      if (HasYMax) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MapMsg other) {
      if (other == null) {
        return;
      }
      if (other.HasXMin) {
        XMin = other.XMin;
      }
      if (other.HasXMax) {
        XMax = other.XMax;
      }
      if (other.HasYMin) {
        YMin = other.YMin;
      }
      if (other.HasYMax) {
        YMax = other.YMax;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            XMin = input.ReadFloat();
            break;
          }
          case 21: {
            XMax = input.ReadFloat();
            break;
          }
          case 29: {
            YMin = input.ReadFloat();
            break;
          }
          case 37: {
            YMax = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///坐标点
  /// </summary>
  public sealed partial class CoordinateXY : pb::IMessage<CoordinateXY> {
    private static readonly pb::MessageParser<CoordinateXY> _parser = new pb::MessageParser<CoordinateXY>(() => new CoordinateXY());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CoordinateXY> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HappyBallProto.HappyBallProtoReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CoordinateXY() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CoordinateXY(CoordinateXY other) : this() {
      _hasBits0 = other._hasBits0;
      coordinateX_ = other.coordinateX_;
      coordinateY_ = other.coordinateY_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CoordinateXY Clone() {
      return new CoordinateXY(this);
    }

    /// <summary>Field number for the "coordinateX" field.</summary>
    public const int CoordinateXFieldNumber = 1;
    private readonly static float CoordinateXDefaultValue = 0F;

    private float coordinateX_;
    /// <summary>
    ///横坐标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CoordinateX {
      get { if ((_hasBits0 & 1) != 0) { return coordinateX_; } else { return CoordinateXDefaultValue; } }
      set {
        _hasBits0 |= 1;
        coordinateX_ = value;
      }
    }
    /// <summary>Gets whether the "coordinateX" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCoordinateX {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "coordinateX" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCoordinateX() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "coordinateY" field.</summary>
    public const int CoordinateYFieldNumber = 2;
    private readonly static float CoordinateYDefaultValue = 0F;

    private float coordinateY_;
    /// <summary>
    ///纵坐标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CoordinateY {
      get { if ((_hasBits0 & 2) != 0) { return coordinateY_; } else { return CoordinateYDefaultValue; } }
      set {
        _hasBits0 |= 2;
        coordinateY_ = value;
      }
    }
    /// <summary>Gets whether the "coordinateY" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCoordinateY {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "coordinateY" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCoordinateY() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CoordinateXY);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CoordinateXY other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CoordinateX, other.CoordinateX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CoordinateY, other.CoordinateY)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasCoordinateX) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CoordinateX);
      if (HasCoordinateY) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CoordinateY);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasCoordinateX) {
        output.WriteRawTag(13);
        output.WriteFloat(CoordinateX);
      }
      if (HasCoordinateY) {
        output.WriteRawTag(21);
        output.WriteFloat(CoordinateY);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasCoordinateX) {
        size += 1 + 4;
      }
      if (HasCoordinateY) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CoordinateXY other) {
      if (other == null) {
        return;
      }
      if (other.HasCoordinateX) {
        CoordinateX = other.CoordinateX;
      }
      if (other.HasCoordinateY) {
        CoordinateY = other.CoordinateY;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            CoordinateX = input.ReadFloat();
            break;
          }
          case 21: {
            CoordinateY = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
