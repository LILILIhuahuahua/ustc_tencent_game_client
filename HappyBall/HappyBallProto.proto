syntax="proto2"; 
package HappyBallProto;

/*
  顶层消息
*/
message GMessage {
  required int32 msgType = 1; //消息类型
  required int32 seqId = 2; //消息的编号
  optional Notify notify = 3; //通知类型
  optional Request request = 4; //请求类型
  optional Response response = 5; //答复类型
}

/*
  enum
*/
enum SNAKE_STATUS {
  LIVE = 1; //存活
  DEAD = 2; //死亡
  INVINCIBLE = 3; //暂时无敌
}

/*
  Notify
*/
message Notify {
  optional EntityInfoChangeNotify entityInfoChangeNotify = 1; //实体的属性变化通知
  optional GameGlobalInfoNotify gameGlobalInfoNotify = 2; //玩家加入时对玩家进行同步的所有消息
  optional TimeNotify time = 3; //对局时间信息通知
  optional MapInfo mapInfo = 4;
}
//生成多个食物，需要发多个
message EntityInfoChangeNotify {
  required int32 entityType = 1; //实体的类型
  required int32 entityId = 2; //实体的Id
  optional PlayerMsg playerMsg = 3; //玩家的信息
  optional ItemMsg itemMsg = 4; //物体的信息
}

message GameGlobalInfoNotify {
  required int32 playerNumber = 1; //玩家数量
  required int64 time = 2; //游戏对局中的时间(开始时间)
  repeated PlayerMsg playerMsg = 3; //对局中玩家的信息
  repeated ItemMsg ItemMsg = 4; //对局中道具的信息
  required MapMsg mapMsg = 5; //地图信息
}

message TimeNotify { //对局时间信息通知
  optional int64 time = 1;
}

message MapInfo {
  required MapMsg mapMsg = 1; //地图信息
}


/*
  Request
*/
message Request {
  optional EntityChangeRequest entityChangeRequest = 1; //实体改变请求，例如两条蛇相撞的时候、蛇吃道具的时候要发此类请求
}

message EntityChangeRequest {
  required int32 eventType = 1; // 事件类型 enum
  required int32 playerId = 2; // 发送请求的实体Id
  optional int32 linkedId = 3; // 交互对象
  optional int32 linkedType = 4; //交互的对象类型
  optional PlayerMsg playerMsg = 5; //玩家的信息
}

/*
  Response
*/
message Response {
  required int32 result = 1; //返回结果
  optional EntityChangeResponse entityChangeResponse = 2;
}

message EntityChangeResponse {
  required bool changeResult = 1; //改变结果是否有效
}

/*
  struct结构
*/
message PlayerMsg {
  required int32 playerId = 1; //玩家的ID
  required CoordinateXY playerPosition = 2; //玩家的坐标
  optional float playerSpeed = 3; //玩家的速度
  optional int32 playerSize = 4; //玩家的大小
  required CoordinateXY snakeDirection = 5; //玩家的行进方向
  required SNAKE_STATUS snakeStatus = 6; //玩家的状态
}

message ItemMsg {
  required int32 foodId = 1; //食物Id
  required int32 foodType = 2; //食物类型
  required CoordinateXY foodPosition = 3; //食物的初始坐标
}

message MapMsg {
  required float XMin = 1;
  required float XMax = 2;
  required float YMin = 3;
  required float YMax = 4; //四个边界
}

message CoordinateXY { //坐标点
  required float coordinateX = 1; //横坐标
  required float coordinateY = 2; //纵坐标
}
